Operadores e operações matematicas
    + Adição
    - Subtração
    * Multiplicação
    / Divisão com resultado fracionário
    // Divisão com resultados inteiros
    % Modulo ou resto
    ** Exponenciação ou potenciação

operadores relacionais
    == Igualdade
    > Maior que
    < Menor que
    != Diferente
    >= maior ou igual
    <= menor ou igual

Operadores Logicos
    not
    and
    or

Marcadores
    %d - Numeros inteiros
    %s - strings
    %f - numeros decimais

Condições
    if condicao :
        bloco de codigo
    elif condicao:
        bloco de codigo
    else :
        if condicao:
            bloco de codigo
        else:
            bloco de codigo

Repetição
    while condicao:
        bloco de codigo

Seria o do-while
    while True:
        bloco de codigo
        if...
            break

Listas
    L = []
    Z = [15, 8, 9]

Uma lista compartilha a mesma posição
    L = [1, 2, 3, 4, 5]
    V = L
    Caso eu altere algum valor em V, irá refletir para o L
Lista com copias separadas
    L = [1, 2, 3, 4, 5]
    V = L[:]
    Quando eu uso o [:], estou fazendo uma copia de todo o conteudo.
    Assim, caso eu altere algo em V, será somente dele e não reflete em L
Fatiamento de lista
    L[0:5]
    L[:5]
    L[:-1] --> Remove o ultimo da lista
    L[1:3]
    L[1:4]
    L[3:]

Funções
    len - Retorna o numero de caracteres da string, podemos usar para saber o tamanho de uma lista
    append - Adicionar um elemento a um objeto Ex.: L.append("b")
    extend - Adiciona elementos de uma lista a outra
    del - Deleta um item da lista. Ex.: del l[0]; del l[1:99]
    pop - Retorna o valor do elemnto e o exclui da fila. Ex.: fila.pop(0)
    list - Utilizado para transformar o resultado dessa função em uma lista. Ex.: list(range(101))


Exemplos com as funções em listas: 
    L.append(["d", "e"]) --> Adiciona uma lista dentro de outra
    L.extend(["f", "g", "h"]) --> Extrai os elementos dessa lista e adiciona em L


